name: Quality

on:
  pull_request:
  push:
    branches: [ main, master ]

permissions:
  contents: read

concurrency:
  group: quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit (all files)
        run: pre-commit run --all-files --show-diff-on-failure

  lint:
    name: Lint and format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements-dev.txt', '**/pyproject.toml') }}

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Verify format (Black/isort)
        run: |
          black --check .
          isort --check-only .

      - name: Lint (Flake8/Pylint)
        run: |
          flake8 $(git ls-files '*.py' | tr '\n' ' ')
          pylint -j 0 $(git ls-files '*.py' | tr '\n' ' ')

  typecheck:
    name: Type check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements-dev.txt', '**/pyproject.toml') }}
      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: mypy
        run: mypy src

  tests:
    name: Tests and coverage
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements-dev.txt', '**/pyproject.toml') }}
      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run pytest with coverage (enforces threshold via pyproject.toml)
        run: |
          pytest
      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

  security:
    name: Security and dependency health
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements-dev.txt', '**/pyproject.toml') }}
      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Bandit (code scan)
        run: bandit -q -r src -x tests
      - name: pip-audit (dependencies)
        run: pip-audit -r requirements.txt || true
